"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import environ
env = environ.Env()

# from users.models import UserProfile
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env_file = BASE_DIR / '.env'
print(env_file)
if env_file.exists():
    environ.Env.read_env(env_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%g(erq!q0qb-*r8u+76d1p%g7r1*&(vjqbndk8^ohp=5lse#8r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

SHARED_APPS = [
    'django_tenants',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.admin',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'companies',
    'publicapp',
    
]

TENANT_APPS = [
    'django.contrib.contenttypes',  # Required
    'django.contrib.auth',          # Required
    'django.contrib.admin',         # Required if you use the Django admin
    'django.contrib.sessions',      # Required
    'django.contrib.messages',      # Required
    'django.contrib.staticfiles',   # Required
    'cms',  # Example of a tenant-specific app
    'users',  # Another tenant-specific app
]

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",
        "NAME": os.environ.get('DATABASE_NAME'),
        "USER": os.environ.get('DATABASE_USER'),
        "PASSWORD": os.environ.get('DATABASE_PASSWORD'),
        "HOST": os.environ.get('DATABASE_HOST'),
        "PORT": os.environ.get('DATABASE_PORT'),
    }
}
print(DATABASES)
DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
             └─319110 /root/cms/cms/venv/bin/python3 /root/cms/cms/venv/bin/gunicorn --workers 3 --bind 0.0.0.0:8001 core.wsgi:appli>

Jun 23 17:37:59 srv545980 systemd[1]: Started kailashcms_gunicorn.service.
Jun 23 17:37:59 srv545980 gunicorn[319107]: [2024-06-23 17:37:59 +0000] [319107] [INFO] Starting gunicorn 22.0.0
Jun 23 17:37:59 srv545980 gunicorn[319107]: [2024-06-23 17:37:59 +0000] [319107] [INFO] Listening at: http://0.0.0.0:8001 (319107)
Jun 23 17:37:59 srv545980 gunicorn[319107]: [2024-06-23 17:37:59 +0000] [319107] [INFO] Using worker: sync
Jun 23 17:37:59 srv545980 gunicorn[319108]: [2024-06-23 17:37:59 +0000] [319108] [INFO] Booting worker with pid: 319108
Jun 23 17:37:59 srv545980 gunicorn[319109]: [2024-06-23 17:37:59 +0000] [319109] [INFO] Booting worker with pid: 319109
Jun 23 17:37:59 srv545980 gunicorn[319110]: [2024-06-23 17:37:59 +0000] [319110] [INFO] Booting worker with pid: 319110
Jun 23 17:38:06 srv545980 systemd[1]: /etc/systemd/system/kailashcms_gunicorn.service:1: Assignment outside of section. Ignoring.
Jun 23 17:38:06 srv545980 systemd[1]: /etc/systemd/system/kailashcms_gunicorn.service:2: Assignment outside of section. Ignoring.
Jun 23 17:38:06 srv545980 systemd[1]: /etc/systemd/system/kailashcms_gunicorn.service:3: Assignment outside of section. Ignoring.
# This is optional, but you can separate tenant static files from shared static files
TENANT_STATIC_PREFIX = 'tenant-static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

PUBLIC_SCHEMA_URLCONF = 'publicapp.urls'

TENANT_MODEL = "companies.Client"  # app.Model

TENANT_DOMAIN_MODEL = "companies.Domain"  # app.Model

REWRITE_STATIC_URLS = True
AUTH_USER_MODEL ='users.CustomUser'


REST_FRAMEWORK = {
    # ... other settings
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

SIMPLE_JWT = {
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}
